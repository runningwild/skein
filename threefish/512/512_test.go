package threefish_test

import (
	"crypto/aes"
	"crypto/cipher"
	"testing"

	enceve "github.com/enceve/crypto/skein/threefish"
	"github.com/runningwild/skein/threefish/512"

	. "github.com/smartystreets/goconvey/convey"
)

func TestEncryptAndDecrypt512(t *testing.T) {
	Convey("get the right answer for known inputs", t, func() {
		cipher := threefish.MakeCipher([64]byte{})
		state := make([]byte, 64)
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xb1, 0xa2, 0xbb, 0xc6, 0xef, 0x60, 0x25, 0xbc,
			0x40, 0xeb, 0x38, 0x22, 0x16, 0x1f, 0x36, 0xe3,
			0x75, 0xd1, 0xbb, 0x0a, 0xee, 0x31, 0x86, 0xfb,
			0xd1, 0x9e, 0x47, 0xc5, 0xd4, 0x79, 0x94, 0x7b,
			0x7b, 0xc2, 0xf8, 0x58, 0x6e, 0x35, 0xf0, 0xcf,
			0xf7, 0xe7, 0xf0, 0x30, 0x84, 0xb0, 0xb7, 0xb1,
			0xf1, 0xab, 0x39, 0x61, 0xa5, 0x80, 0xa3, 0xe9,
			0x7e, 0xb4, 0x1e, 0xa1, 0x4a, 0x6d, 0x7b, 0xbe,
		})
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x27, 0x0d, 0x17, 0x33, 0x61, 0xb9, 0x91, 0x9f,
			0x46, 0x48, 0xe5, 0xc5, 0xf9, 0xe4, 0x9a, 0xa3,
			0x53, 0x5c, 0xfa, 0xc5, 0x45, 0xe4, 0x28, 0x0a,
			0x78, 0x5d, 0x7c, 0xd3, 0x34, 0xae, 0xd2, 0xc2,
			0xee, 0x64, 0xac, 0xe8, 0xa6, 0x4c, 0xbd, 0x69,
			0xe6, 0x06, 0x43, 0x51, 0x4f, 0xb4, 0xcb, 0xfb,
			0x4a, 0x13, 0x29, 0x31, 0xca, 0x37, 0x5b, 0x6f,
			0xff, 0xb3, 0x2f, 0xb8, 0x1d, 0xcc, 0x9e, 0xf5,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xb1, 0xa2, 0xbb, 0xc6, 0xef, 0x60, 0x25, 0xbc,
			0x40, 0xeb, 0x38, 0x22, 0x16, 0x1f, 0x36, 0xe3,
			0x75, 0xd1, 0xbb, 0x0a, 0xee, 0x31, 0x86, 0xfb,
			0xd1, 0x9e, 0x47, 0xc5, 0xd4, 0x79, 0x94, 0x7b,
			0x7b, 0xc2, 0xf8, 0x58, 0x6e, 0x35, 0xf0, 0xcf,
			0xf7, 0xe7, 0xf0, 0x30, 0x84, 0xb0, 0xb7, 0xb1,
			0xf1, 0xab, 0x39, 0x61, 0xa5, 0x80, 0xa3, 0xe9,
			0x7e, 0xb4, 0x1e, 0xa1, 0x4a, 0x6d, 0x7b, 0xbe,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		})
	})
}

func BenchmarkEncrypt512Block(b *testing.B) {
	var state [64]byte
	var key [9]uint64
	var tweak [3]uint64
	for i := 0; i < b.N; i++ {
		threefish.Encrypt(state[:], &key, &tweak)
	}
}

func BenchmarkEncrypt512Block_enceve(b *testing.B) {
	var state [8]uint64
	var key [9]uint64
	var tweak [3]uint64
	for i := 0; i < b.N; i++ {
		enceve.Encrypt512(&state, &key, &tweak)
	}
}

func BenchmarkDecrypt512Block(b *testing.B) {
	var state [64]byte
	var key [9]uint64
	var tweak [3]uint64
	for i := 0; i < b.N; i++ {
		threefish.Decrypt(state[:], &key, &tweak)
	}
}

func BenchmarkDecrypt512Block_enceve(b *testing.B) {
	var state [8]uint64
	var key [9]uint64
	var tweak [3]uint64
	for i := 0; i < b.N; i++ {
		enceve.Decrypt512(&state, &key, &tweak)
	}
}

func BenchmarkThreefishCBCEncryption(b *testing.B) {
	msg := make([]byte, 1000*1000)
	for i := 0; i < b.N; i++ {
		// cipher :=
		c := cipher.NewCBCEncrypter(threefish.MakeCipher([64]byte{}), make([]byte, 64))
		c.CryptBlocks(msg, msg)
	}
}

func BenchmarkAESCBCEncryption(b *testing.B) {
	msg := make([]byte, 1000*1000)
	for i := 0; i < b.N; i++ {
		b, _ := aes.NewCipher(make([]byte, 16))
		c := cipher.NewCBCEncrypter(b, make([]byte, 16))
		c.CryptBlocks(msg, msg)
	}
}
