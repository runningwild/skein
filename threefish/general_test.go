package threefish_test

import (
	"testing"

	"github.com/runningwild/skein/threefish"

	. "github.com/smartystreets/goconvey/convey"
)

func TestEncryptAndDecryptGeneral(t *testing.T) {
	Convey("get the right answer for standard 256-bit threefish", t, func() {
		gen, err := threefish.NewGeneral([][]uint{
			{14, 16},
			{52, 57},
			{23, 40},
			{5, 37},
			{25, 33},
			{46, 12},
			{58, 22},
			{32, 32},
		}, []int{0, 3, 2, 1}, 72, 4, 0x1bd11bdaa9fc1a22)
		So(err, ShouldBeNil)
		cipher, err := gen.MakeCipher(make([]byte, 32))
		So(err, ShouldBeNil)
		state := make([]byte, 32)
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x84, 0xda, 0x2a, 0x1f, 0x8b, 0xea, 0xee, 0x94,
			0x70, 0x66, 0xae, 0x3e, 0x31, 0x03, 0xf1, 0xad,
			0x53, 0x6d, 0xb1, 0xf4, 0xa1, 0x19, 0x24, 0x95,
			0x11, 0x6b, 0x9f, 0x3c, 0xe6, 0x13, 0x3f, 0xd8,
		})
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x43, 0x5f, 0xdc, 0xf2, 0xfd, 0x3a, 0xb9, 0x35,
			0x71, 0x3f, 0x12, 0x6b, 0xfb, 0x32, 0x20, 0x3b,
			0x56, 0x2b, 0xf2, 0xd3, 0x1f, 0x26, 0x31, 0x46,
			0xaf, 0xa5, 0x34, 0x60, 0x3f, 0x63, 0x97, 0x20,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x84, 0xda, 0x2a, 0x1f, 0x8b, 0xea, 0xee, 0x94,
			0x70, 0x66, 0xae, 0x3e, 0x31, 0x03, 0xf1, 0xad,
			0x53, 0x6d, 0xb1, 0xf4, 0xa1, 0x19, 0x24, 0x95,
			0x11, 0x6b, 0x9f, 0x3c, 0xe6, 0x13, 0x3f, 0xd8,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
		})
	})
	Convey("get the right answer for standard 512-bit threefish", t, func() {
		gen, err := threefish.NewGeneral([][]uint{
			{46, 36, 19, 37},
			{33, 27, 14, 42},
			{17, 49, 36, 39},
			{44, 9, 54, 56},
			{39, 30, 34, 24},
			{13, 50, 10, 17},
			{25, 29, 39, 43},
			{8, 35, 56, 22},
		}, []int{2, 1, 4, 7, 6, 5, 0, 3}, 72, 4, 0x1bd11bdaa9fc1a22)
		So(err, ShouldBeNil)
		cipher, err := gen.MakeCipher(make([]byte, 64))
		So(err, ShouldBeNil)
		state := make([]byte, 64)
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xb1, 0xa2, 0xbb, 0xc6, 0xef, 0x60, 0x25, 0xbc,
			0x40, 0xeb, 0x38, 0x22, 0x16, 0x1f, 0x36, 0xe3,
			0x75, 0xd1, 0xbb, 0x0a, 0xee, 0x31, 0x86, 0xfb,
			0xd1, 0x9e, 0x47, 0xc5, 0xd4, 0x79, 0x94, 0x7b,
			0x7b, 0xc2, 0xf8, 0x58, 0x6e, 0x35, 0xf0, 0xcf,
			0xf7, 0xe7, 0xf0, 0x30, 0x84, 0xb0, 0xb7, 0xb1,
			0xf1, 0xab, 0x39, 0x61, 0xa5, 0x80, 0xa3, 0xe9,
			0x7e, 0xb4, 0x1e, 0xa1, 0x4a, 0x6d, 0x7b, 0xbe,
		})
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x27, 0x0d, 0x17, 0x33, 0x61, 0xb9, 0x91, 0x9f,
			0x46, 0x48, 0xe5, 0xc5, 0xf9, 0xe4, 0x9a, 0xa3,
			0x53, 0x5c, 0xfa, 0xc5, 0x45, 0xe4, 0x28, 0x0a,
			0x78, 0x5d, 0x7c, 0xd3, 0x34, 0xae, 0xd2, 0xc2,
			0xee, 0x64, 0xac, 0xe8, 0xa6, 0x4c, 0xbd, 0x69,
			0xe6, 0x06, 0x43, 0x51, 0x4f, 0xb4, 0xcb, 0xfb,
			0x4a, 0x13, 0x29, 0x31, 0xca, 0x37, 0x5b, 0x6f,
			0xff, 0xb3, 0x2f, 0xb8, 0x1d, 0xcc, 0x9e, 0xf5,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xb1, 0xa2, 0xbb, 0xc6, 0xef, 0x60, 0x25, 0xbc,
			0x40, 0xeb, 0x38, 0x22, 0x16, 0x1f, 0x36, 0xe3,
			0x75, 0xd1, 0xbb, 0x0a, 0xee, 0x31, 0x86, 0xfb,
			0xd1, 0x9e, 0x47, 0xc5, 0xd4, 0x79, 0x94, 0x7b,
			0x7b, 0xc2, 0xf8, 0x58, 0x6e, 0x35, 0xf0, 0xcf,
			0xf7, 0xe7, 0xf0, 0x30, 0x84, 0xb0, 0xb7, 0xb1,
			0xf1, 0xab, 0x39, 0x61, 0xa5, 0x80, 0xa3, 0xe9,
			0x7e, 0xb4, 0x1e, 0xa1, 0x4a, 0x6d, 0x7b, 0xbe,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		})
	})
	Convey("get the right answer for standard 1024-bit threefish", t, func() {
		gen, err := threefish.NewGeneral([][]uint{
			{24, 13, 8, 47, 8, 17, 22, 37},
			{38, 19, 10, 55, 49, 18, 23, 52},
			{33, 4, 51, 13, 34, 41, 59, 17},
			{5, 20, 48, 41, 47, 28, 16, 25},
			{41, 9, 37, 31, 12, 47, 44, 30},
			{16, 34, 56, 51, 4, 53, 42, 41},
			{31, 44, 47, 46, 19, 42, 44, 25},
			{9, 48, 35, 52, 23, 31, 37, 20},
		}, []int{0, 9, 2, 13, 6, 11, 4, 15, 10, 7, 12, 3, 14, 5, 8, 1}, 80, 4, 0x1bd11bdaa9fc1a22)
		So(err, ShouldBeNil)
		cipher, err := gen.MakeCipher(make([]byte, 128))
		So(err, ShouldBeNil)
		state := make([]byte, 128)
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xf0, 0x5c, 0x3d, 0x0a, 0x3d, 0x05, 0xb3, 0x04,
			0xf7, 0x85, 0xdd, 0xc7, 0xd1, 0xe0, 0x36, 0x01,
			0x5c, 0x8a, 0xa7, 0x6e, 0x2f, 0x21, 0x7b, 0x06,
			0xc6, 0xe1, 0x54, 0x4c, 0x0b, 0xc1, 0xa9, 0x0d,
			0xf0, 0xac, 0xcb, 0x94, 0x73, 0xc2, 0x4e, 0x0f,
			0xd5, 0x4f, 0xea, 0x68, 0x05, 0x7f, 0x43, 0x32,
			0x9c, 0xb4, 0x54, 0x76, 0x1d, 0x6d, 0xf5, 0xcf,
			0x7b, 0x2e, 0x9b, 0x36, 0x14, 0xfb, 0xd5, 0xa2,
			0x0b, 0x2e, 0x47, 0x60, 0xb4, 0x06, 0x03, 0x54,
			0x0d, 0x82, 0xea, 0xbc, 0x54, 0x82, 0xc1, 0x71,
			0xc8, 0x32, 0xaf, 0xbe, 0x68, 0x40, 0x6b, 0xc3,
			0x95, 0x00, 0x36, 0x7a, 0x59, 0x29, 0x43, 0xfa,
			0x9a, 0x5b, 0x4a, 0x43, 0x28, 0x6c, 0xa3, 0xc4,
			0xcf, 0x46, 0x10, 0x4b, 0x44, 0x31, 0x43, 0xd5,
			0x60, 0xa4, 0xb2, 0x30, 0x48, 0x83, 0x11, 0xdf,
			0x4f, 0xee, 0xf7, 0xe1, 0xdf, 0xe8, 0x39, 0x1e,
		})
		cipher.Encrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x23, 0xfb, 0xe2, 0x6d, 0xf4, 0xb4, 0x84, 0x80,
			0xc8, 0xc8, 0xb2, 0xae, 0xae, 0xac, 0xfd, 0xd6,
			0xd4, 0xbc, 0x8e, 0x3f, 0x56, 0xa2, 0xde, 0x50,
			0xce, 0xfc, 0x96, 0xb2, 0x80, 0xb1, 0xd3, 0x26,
			0xe4, 0xee, 0x14, 0xd8, 0xfa, 0xa3, 0x83, 0x95,
			0xfc, 0x6a, 0xd5, 0xe5, 0x23, 0x52, 0x81, 0x09,
			0x00, 0x28, 0xd0, 0x74, 0x63, 0x12, 0x1c, 0x01,
			0x45, 0x7e, 0xef, 0x09, 0x58, 0xf9, 0xb3, 0xa8,
			0xe8, 0x1f, 0x47, 0x66, 0x32, 0x98, 0xda, 0x22,
			0x6e, 0xd4, 0xfa, 0x54, 0xc3, 0x87, 0x33, 0xfd,
			0xc4, 0xeb, 0x49, 0xba, 0xc9, 0xf5, 0x32, 0x92,
			0xd6, 0x9c, 0x45, 0x69, 0xaa, 0x58, 0xea, 0x68,
			0x10, 0xd8, 0x79, 0xb8, 0xc6, 0x73, 0xed, 0x56,
			0x85, 0xef, 0x77, 0x54, 0x53, 0x31, 0x4b, 0x16,
			0xed, 0x4f, 0x64, 0x1c, 0xbe, 0x84, 0x56, 0x22,
			0x8b, 0x9c, 0xa0, 0x00, 0xb2, 0x66, 0x2f, 0x17,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0xf0, 0x5c, 0x3d, 0x0a, 0x3d, 0x05, 0xb3, 0x04,
			0xf7, 0x85, 0xdd, 0xc7, 0xd1, 0xe0, 0x36, 0x01,
			0x5c, 0x8a, 0xa7, 0x6e, 0x2f, 0x21, 0x7b, 0x06,
			0xc6, 0xe1, 0x54, 0x4c, 0x0b, 0xc1, 0xa9, 0x0d,
			0xf0, 0xac, 0xcb, 0x94, 0x73, 0xc2, 0x4e, 0x0f,
			0xd5, 0x4f, 0xea, 0x68, 0x05, 0x7f, 0x43, 0x32,
			0x9c, 0xb4, 0x54, 0x76, 0x1d, 0x6d, 0xf5, 0xcf,
			0x7b, 0x2e, 0x9b, 0x36, 0x14, 0xfb, 0xd5, 0xa2,
			0x0b, 0x2e, 0x47, 0x60, 0xb4, 0x06, 0x03, 0x54,
			0x0d, 0x82, 0xea, 0xbc, 0x54, 0x82, 0xc1, 0x71,
			0xc8, 0x32, 0xaf, 0xbe, 0x68, 0x40, 0x6b, 0xc3,
			0x95, 0x00, 0x36, 0x7a, 0x59, 0x29, 0x43, 0xfa,
			0x9a, 0x5b, 0x4a, 0x43, 0x28, 0x6c, 0xa3, 0xc4,
			0xcf, 0x46, 0x10, 0x4b, 0x44, 0x31, 0x43, 0xd5,
			0x60, 0xa4, 0xb2, 0x30, 0x48, 0x83, 0x11, 0xdf,
			0x4f, 0xee, 0xf7, 0xe1, 0xdf, 0xe8, 0x39, 0x1e,
		})
		cipher.Decrypt(state, state)
		So(state, ShouldResemble, []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		})
	})
}

func BenchmarkGeneral(b *testing.B) {
	gen, _ := threefish.NewGeneral([][]uint{
		{14, 16},
		{52, 57},
		{23, 40},
		{5, 37},
		{25, 33},
		{46, 12},
		{58, 22},
		{32, 32},
	}, []int{0, 3, 2, 1}, 72, 4, 0x1bd11bdaa9fc1a22)
	cipher, _ := gen.MakeCipher(make([]byte, 32))
	data := make([]byte, 32)
	for i := 0; i < b.N; i++ {
		cipher.Encrypt(data, data)
	}
}
