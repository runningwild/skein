package ubi_test

import (
	"testing"

	tf1024 "github.com/runningwild/skein/threefish/1024"
	tf256 "github.com/runningwild/skein/threefish/256"
	tf512 "github.com/runningwild/skein/threefish/512"
	"github.com/runningwild/skein/ubi"

	. "github.com/smartystreets/goconvey/convey"
)

func TestSkeinGeneral(t *testing.T) {
	sampleMessages := [][]byte{
		[]byte(""),
		[]byte("Buttons is an adorable dog"),
		[]byte("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."),
	}
	giantMess := make([]byte, 1024*1024)
	for i := range giantMess {
		giantMess[i] = byte(i)
	}
	sampleMessages = append(sampleMessages, giantMess)

	Convey("ubi.Skein", t, func() {
		u, err := ubi.New(tf256.Encrypt, 256)
		So(err, ShouldBeNil)

		Convey("doesn't corrupt input message", func() {
			msg := make([]byte, 100)
			u.Skein(msg, len(msg)*8, 256)
			for i := range msg {
				So(msg[i], ShouldBeZeroValue)
			}
		})

		Convey("matches skein256_N", func() {
			for _, msg := range sampleMessages {
				for _, outlen := range []uint64{10, 100, 1000, 8000, 10 * 1024} {
					h := u.Skein(msg, len(msg)*8, outlen)
					So(h[:], ShouldResemble, ubi.Skein256_N(msg, outlen))
				}
			}
		})

		Convey("passes test vectors", func() {
			So(u.Skein(make([]byte, 128), 128*8, 512), ShouldResemble, []byte{
				0x91, 0x8A, 0x1B, 0x6D, 0x20, 0x01, 0x5D, 0x0B, 0xF5, 0x3C, 0xF4, 0xFD, 0xD3, 0x9E, 0x28, 0xD8,
				0xBC, 0x55, 0x04, 0xA9, 0x6C, 0x1D, 0x31, 0x0A, 0xD5, 0xAD, 0xB1, 0x5D, 0xCD, 0xDE, 0xA2, 0x70,
				0x18, 0x4F, 0x94, 0x67, 0x45, 0x1C, 0xD9, 0x7B, 0xC6, 0x24, 0xD3, 0x08, 0x83, 0xA0, 0x06, 0x33,
				0x64, 0x57, 0x81, 0x5A, 0x88, 0xA9, 0xFE, 0xB4, 0x49, 0x46, 0x0E, 0x4B, 0x42, 0xD9, 0x66, 0xAC,
			})
		})
	})

	Convey("ubi.Skein 512", t, func() {
		u, err := ubi.New(tf512.Encrypt, 512)
		So(err, ShouldBeNil)

		Convey("doesn't corrupt input message", func() {
			msg := make([]byte, 100)
			u.Skein(msg, len(msg)*8, 256)
			for i := range msg {
				So(msg[i], ShouldBeZeroValue)
			}
		})

		Convey("passes test vectors", func() {
			So(u.Skein(make([]byte, 0), 0, 512), ShouldResemble, []byte{
				0xBC, 0x5B, 0x4C, 0x50, 0x92, 0x55, 0x19, 0xC2, 0x90, 0xCC, 0x63, 0x42, 0x77, 0xAE, 0x3D, 0x62,
				0x57, 0x21, 0x23, 0x95, 0xCB, 0xA7, 0x33, 0xBB, 0xAD, 0x37, 0xA4, 0xAF, 0x0F, 0xA0, 0x6A, 0xF4,
				0x1F, 0xCA, 0x79, 0x03, 0xD0, 0x65, 0x64, 0xFE, 0xA7, 0xA2, 0xD3, 0x73, 0x0D, 0xBD, 0xB8, 0x0C,
				0x1F, 0x85, 0x56, 0x2D, 0xFC, 0xC0, 0x70, 0x33, 0x4E, 0xA4, 0xD1, 0xD9, 0xE7, 0x2C, 0xBA, 0x7A,
			})
			// So(u.Skein(make([]byte, 1), 1, 512), ShouldResemble, []byte{
			// 	0xBF, 0x96, 0xB3, 0x5C, 0xEC, 0xAF, 0xC8, 0xAD, 0x25, 0xAC, 0x72, 0x07, 0xE9, 0x0E, 0xF2, 0x79,
			// 	0xFE, 0x99, 0xBE, 0x45, 0x94, 0xAE, 0x99, 0x6F, 0x72, 0x69, 0x68, 0xC4, 0xB7, 0x99, 0x01, 0x8A,
			// 	0x24, 0x8D, 0x80, 0x15, 0x29, 0x52, 0xC4, 0xC3, 0x15, 0x89, 0x77, 0x6C, 0x36, 0x7E, 0x7B, 0x61,
			// 	0x53, 0xDC, 0x0D, 0xBD, 0xF1, 0xB4, 0x79, 0xD5, 0x32, 0x98, 0xA6, 0x32, 0x8A, 0xA0, 0x3F, 0xDB,
			// })
			// So(u.Skein(make([]byte, 1), 2, 512), ShouldResemble, []byte{
			// 	0x97, 0x3A, 0xA7, 0x7A, 0x56, 0x2C, 0xA7, 0x1B, 0xD5, 0x40, 0x59, 0x8B, 0x1A, 0x88, 0xB8, 0x03,
			// 	0x74, 0x30, 0x9B, 0xCA, 0x89, 0xCD, 0xF9, 0x79, 0xEE, 0x4A, 0xD9, 0x20, 0x23, 0xE4, 0x9D, 0x35,
			// 	0xD0, 0xEA, 0xD2, 0xEE, 0x8D, 0xF7, 0x51, 0xC3, 0x62, 0x42, 0xBA, 0x14, 0x79, 0x2C, 0xE7, 0xFC,
			// 	0xAB, 0x91, 0xDD, 0xD1, 0xCA, 0x8B, 0xD1, 0x18, 0xA3, 0x57, 0x1D, 0x65, 0x81, 0x14, 0x11, 0xCD,
			// })
			// So(u.Skein(make([]byte, 1), 3, 512), ShouldResemble, []byte{
			// 	0x53, 0x12, 0xDD, 0x38, 0xA2, 0x7B, 0x52, 0x7E, 0x0F, 0xA8, 0x14, 0x7A, 0x54, 0x19, 0xA8, 0x6B,
			// 	0xCF, 0xA0, 0x09, 0xB9, 0x8E, 0x0D, 0x49, 0xD2, 0xA1, 0x85, 0xBC, 0xD7, 0x87, 0x33, 0xE0, 0xB4,
			// 	0x2F, 0xFC, 0x06, 0x16, 0x24, 0x56, 0xA7, 0xCE, 0x41, 0x3C, 0x34, 0x41, 0x82, 0x64, 0xF8, 0xB0,
			// 	0xE4, 0xA5, 0x10, 0xBC, 0xBD, 0x80, 0xA8, 0xAA, 0xDA, 0x66, 0x89, 0xBB, 0xC5, 0xF8, 0x0B, 0xE8,
			// })
			// So(u.Skein(make([]byte, 1), 4, 512), ShouldResemble, []byte{
			// 	0xD8, 0x8A, 0x69, 0x3B, 0x6C, 0x26, 0x04, 0x9D, 0xED, 0x03, 0x51, 0x91, 0x91, 0x00, 0x4B, 0x9A,
			// 	0xAB, 0xE3, 0x34, 0x28, 0xED, 0x96, 0x93, 0x59, 0x90, 0x4E, 0xCB, 0x0B, 0xDA, 0x03, 0xFF, 0xD3,
			// 	0xF5, 0xF8, 0xC3, 0x94, 0x45, 0x98, 0x20, 0x5A, 0xEC, 0x25, 0x79, 0x32, 0xDD, 0x77, 0x33, 0x11,
			// 	0xA9, 0x1B, 0x76, 0xB2, 0x53, 0xD1, 0xBA, 0x0E, 0x8B, 0x0A, 0x08, 0x4B, 0xEA, 0x88, 0x46, 0x3C,
			// })
			// So(u.Skein(make([]byte, 1), 5, 512), ShouldResemble, []byte{
			// 	0x84, 0x56, 0x1F, 0x7D, 0x3C, 0xB1, 0x88, 0x02, 0x3E, 0x27, 0xC8, 0x30, 0x18, 0xC6, 0x07, 0x6F,
			// 	0x4B, 0xAF, 0xE8, 0xF9, 0x7A, 0x35, 0x3C, 0x83, 0x1C, 0x31, 0x52, 0x7C, 0x1C, 0x37, 0xA8, 0x2E,
			// 	0x9D, 0x10, 0x2F, 0xDA, 0x45, 0xF7, 0x20, 0x5B, 0x76, 0x27, 0x27, 0x75, 0xB4, 0xD0, 0x6E, 0x3D,
			// 	0x04, 0x2A, 0x23, 0xA6, 0x09, 0x16, 0x4A, 0x44, 0xB2, 0xCE, 0xBC, 0x1E, 0x89, 0x48, 0x0D, 0x11,
			// })
			// So(u.Skein(make([]byte, 1), 6, 512), ShouldResemble, []byte{
			// 	0x37, 0x93, 0x17, 0xF2, 0x68, 0xD4, 0xB1, 0x88, 0x1F, 0x1A, 0x04, 0x75, 0x86, 0xF9, 0x76, 0xA8,
			// 	0xBF, 0x43, 0xFC, 0x40, 0x0A, 0xF8, 0x2B, 0xAD, 0xDB, 0xD8, 0xFF, 0xA2, 0x50, 0x39, 0xC0, 0xB1,
			// 	0x8E, 0xF2, 0x7C, 0x36, 0xCF, 0xEC, 0x7B, 0xFE, 0x80, 0xB9, 0xF4, 0x76, 0x25, 0x54, 0x2D, 0x8C,
			// 	0x89, 0xAF, 0x31, 0x2C, 0xF2, 0x27, 0x95, 0x98, 0xD0, 0xB7, 0xDD, 0xB1, 0xBD, 0x06, 0xE7, 0xBE,
			// })
			// So(u.Skein(make([]byte, 1), 7, 512), ShouldResemble, []byte{
			// 	0x72, 0x08, 0xE0, 0x3C, 0x12, 0x15, 0xEB, 0xCC, 0xB4, 0x4A, 0xF0, 0xD4, 0xE1, 0x9A, 0xD5, 0xD6,
			// 	0xD9, 0xFC, 0x05, 0x62, 0x3D, 0x2B, 0x1E, 0x0F, 0x63, 0x1B, 0x09, 0x12, 0x42, 0x0F, 0x3A, 0x3B,
			// 	0xBE, 0x89, 0xED, 0x1B, 0x91, 0x18, 0x80, 0xFB, 0xE7, 0x57, 0x21, 0x56, 0xC4, 0x3B, 0x6B, 0x66,
			// 	0x0D, 0xE4, 0xFB, 0xB8, 0xCE, 0x7C, 0x50, 0xC8, 0xFD, 0x16, 0xD7, 0xEA, 0x70, 0x96, 0xAA, 0x6B,
			// })
			So(u.Skein(make([]byte, 1), 8, 512), ShouldResemble, []byte{
				0x40, 0x28, 0x5F, 0x43, 0x36, 0x99, 0xA1, 0xD8, 0xC7, 0x99, 0xB2, 0x76, 0xCC, 0xF1, 0x80, 0x10,
				0xC9, 0xDC, 0x9D, 0x41, 0x8B, 0x0E, 0x8A, 0x4E, 0xD9, 0x87, 0xB4, 0x4C, 0x61, 0xC0, 0x1C, 0x5C,
				0xCB, 0xCC, 0x09, 0x77, 0xB1, 0xD3, 0x4A, 0x4D, 0x36, 0x65, 0xD2, 0x0E, 0x12, 0x71, 0x6D, 0xF9,
				0x34, 0xD2, 0x08, 0xFE, 0xA6, 0x60, 0x7F, 0x74, 0x96, 0x8E, 0xD8, 0x6B, 0xE3, 0xC9, 0x98, 0x32,
			})
			// So(u.Skein(make([]byte, 2), 9, 512), ShouldResemble, []byte{
			// 	0x09, 0x9B, 0x62, 0xE2, 0x22, 0x48, 0x0C, 0x7C, 0x04, 0x36, 0x55, 0x81, 0xF7, 0x5E, 0x99, 0xDE,
			// 	0xFF, 0xB9, 0xB3, 0x77, 0xD6, 0x72, 0x69, 0x69, 0xC9, 0x13, 0xD4, 0x4F, 0xDA, 0x78, 0x6A, 0xEE,
			// 	0xE1, 0x58, 0x78, 0x40, 0xC9, 0xC9, 0xCC, 0xE7, 0x3C, 0x70, 0xAD, 0x00, 0x49, 0xAA, 0x25, 0xC9,
			// 	0xFC, 0x1E, 0x83, 0xE6, 0x80, 0x94, 0x76, 0x5B, 0x2F, 0xC9, 0xAA, 0xB2, 0xAE, 0x14, 0xAE, 0x54,
			// })
			// So(u.Skein(make([]byte, 2), 10, 512), ShouldResemble, []byte{
			// 	0xEE, 0x15, 0x8A, 0x4F, 0xD6, 0x5A, 0x35, 0x99, 0xA1, 0xAE, 0x55, 0x27, 0x2C, 0xF1, 0x6E, 0xED,
			// 	0x8E, 0x69, 0x54, 0x1A, 0xA8, 0x4E, 0x34, 0x57, 0x7E, 0x22, 0x18, 0xB6, 0x7F, 0x20, 0xF1, 0x19,
			// 	0x6F, 0xF5, 0xF9, 0x6E, 0x56, 0x5D, 0xBF, 0xCF, 0x1C, 0x4D, 0x5A, 0x37, 0x91, 0xAB, 0x1B, 0x27,
			// 	0x87, 0x3B, 0xB8, 0xCD, 0x67, 0xB0, 0xDC, 0xB1, 0x81, 0xD5, 0x86, 0x33, 0x26, 0x93, 0x4E, 0x47,
			// })
			So(u.Skein(make([]byte, 4), 32, 512), ShouldResemble, []byte{
				0xDD, 0x01, 0xC3, 0x25, 0x31, 0xE8, 0x10, 0x0E, 0x47, 0x0C, 0x47, 0x80, 0x9B, 0xD2, 0x1F, 0x84,
				0x30, 0x7B, 0x6B, 0x8D, 0xA6, 0x16, 0xC4, 0x6E, 0xA1, 0xBB, 0x4F, 0x85, 0xB5, 0x47, 0x59, 0x16,
				0xFB, 0x86, 0xC1, 0x3F, 0xAF, 0x65, 0x17, 0x88, 0xAA, 0x17, 0x21, 0x65, 0x18, 0xC7, 0x24, 0xA5,
				0x81, 0x94, 0x8B, 0x42, 0xDE, 0x79, 0x15, 0x96, 0xD1, 0x56, 0x9E, 0xBE, 0x91, 0x64, 0x8B, 0x89,
			})
			So(u.Skein(make([]byte, 8), 64, 512), ShouldResemble, []byte{
				0xA8, 0xC3, 0x7D, 0x4E, 0xD5, 0x47, 0xF6, 0xEC, 0xDC, 0xA7, 0xFF, 0x52, 0xAC, 0x34, 0x97, 0x7E,
				0x17, 0xB5, 0x68, 0xD7, 0xE8, 0xF4, 0x9F, 0x0B, 0xD0, 0x6C, 0xD9, 0xC9, 0x8E, 0xA8, 0x07, 0x99,
				0x9B, 0x11, 0x68, 0x1B, 0x3B, 0x39, 0x0F, 0xE5, 0x4D, 0x52, 0x3B, 0xD0, 0xEA, 0x07, 0xCA, 0xAE,
				0x6D, 0x31, 0xB2, 0x26, 0xD1, 0xA7, 0x07, 0x5F, 0xC3, 0x10, 0x9D, 0x98, 0x59, 0xC8, 0x79, 0xD8,
			})
			So(u.Skein(make([]byte, 16), 128, 512), ShouldResemble, []byte{
				0xFC, 0x71, 0x63, 0x10, 0xCF, 0x81, 0xB8, 0x99, 0x08, 0x44, 0xB1, 0x95, 0xDF, 0xA7, 0x65, 0x21,
				0x75, 0x6F, 0xB0, 0xC8, 0xF2, 0x60, 0x47, 0x72, 0x05, 0x6B, 0xE8, 0x6E, 0x83, 0xDE, 0xD3, 0x6F,
				0x25, 0x77, 0xA8, 0xD7, 0xD6, 0xE3, 0xD2, 0x11, 0x2F, 0x46, 0x37, 0x01, 0x6C, 0x75, 0x09, 0x9E,
				0x27, 0x1D, 0xF1, 0x2D, 0xDC, 0xB3, 0x25, 0x74, 0x33, 0xF9, 0x1B, 0xBE, 0x97, 0x0B, 0x84, 0xAA,
			})
			So(u.Skein(make([]byte, 24), 192, 512), ShouldResemble, []byte{
				0x70, 0x8B, 0x36, 0x3C, 0x78, 0xF1, 0x5C, 0xB3, 0x9D, 0x85, 0x82, 0x4E, 0xA1, 0x33, 0x98, 0x97,
				0xA0, 0x03, 0xA7, 0x92, 0xC2, 0xA0, 0x19, 0x26, 0x04, 0xB3, 0x89, 0x74, 0x07, 0x58, 0xB3, 0xC7,
				0xD2, 0x34, 0x4C, 0xA8, 0xF5, 0x0F, 0x49, 0x3F, 0x30, 0x6D, 0x84, 0x68, 0x69, 0x5B, 0x18, 0xB8,
				0x48, 0xEA, 0xC5, 0x23, 0x49, 0x52, 0xE5, 0xAC, 0x47, 0x91, 0xEC, 0x88, 0xE7, 0x18, 0x4C, 0x37,
			})
			// So(u.Skein(make([]byte, 32), 255, 512), ShouldResemble, []byte{
			// 	0x86, 0x4A, 0x3F, 0x1A, 0x1A, 0x29, 0x1C, 0xAA, 0x28, 0x07, 0x52, 0xB4, 0x99, 0x11, 0xC0, 0xA5,
			// 	0xD0, 0x7A, 0x04, 0x5F, 0x5B, 0xDF, 0xE9, 0xE6, 0x66, 0x0C, 0xB1, 0xDF, 0x70, 0x8C, 0x81, 0x82,
			// 	0x40, 0x7E, 0x79, 0xB8, 0xA3, 0x81, 0x9B, 0x98, 0xD6, 0xAB, 0x7E, 0x3E, 0xB9, 0x83, 0x9E, 0x7E,
			// 	0x64, 0x70, 0xC5, 0x44, 0x15, 0xF9, 0x2A, 0xFD, 0xD4, 0xFA, 0xFA, 0x25, 0x52, 0xBB, 0x53, 0x39,
			// })
			So(u.Skein(make([]byte, 32), 256, 512), ShouldResemble, []byte{
				0x49, 0xA7, 0xF0, 0xEE, 0x7C, 0xAE, 0xB2, 0x8E, 0x35, 0xA7, 0x0C, 0x68, 0x04, 0x55, 0x71, 0xED,
				0x66, 0x38, 0x8A, 0x6E, 0x98, 0x93, 0x9C, 0x44, 0xC6, 0x32, 0xED, 0xB2, 0xCA, 0x8A, 0x16, 0x17,
				0xCA, 0x95, 0x02, 0x13, 0x45, 0x4D, 0xA4, 0x63, 0xE2, 0xDF, 0x5F, 0x32, 0x28, 0x43, 0x63, 0xCF,
				0x38, 0x6A, 0x1E, 0xF1, 0x30, 0x87, 0xA9, 0xF8, 0x26, 0xEB, 0xB5, 0xC8, 0x6D, 0xEA, 0xC5, 0xEC,
			})
			// So(u.Skein(make([]byte, 33), 257, 512), ShouldResemble, []byte{
			// 	0xA0, 0x55, 0x50, 0x60, 0xF7, 0xC3, 0xA8, 0xA8, 0xC2, 0xA1, 0x14, 0x8F, 0x7A, 0x69, 0x7A, 0x66,
			// 	0xA8, 0x75, 0x10, 0xD5, 0xFB, 0x1C, 0xAB, 0x41, 0xCF, 0xEC, 0x12, 0x9D, 0x9D, 0xED, 0x18, 0x7E,
			// 	0xB0, 0xFE, 0x29, 0xB2, 0x63, 0xFE, 0xA3, 0xD7, 0xD9, 0x76, 0x4B, 0x61, 0x65, 0x1F, 0x92, 0x43,
			// 	0xB0, 0x5B, 0x64, 0x10, 0xF5, 0xF2, 0xD5, 0xC5, 0xCB, 0x89, 0x98, 0x6D, 0xA0, 0xE3, 0x83, 0x05,
			// })
			So(u.Skein(make([]byte, 48), 384, 512), ShouldResemble, []byte{
				0xE5, 0xD3, 0x7D, 0x8D, 0x3D, 0xDC, 0x6A, 0x9C, 0x5F, 0x0B, 0x5D, 0xF9, 0xB8, 0x40, 0xEB, 0xD7,
				0x34, 0x3D, 0x25, 0xEC, 0x20, 0xB8, 0x48, 0x92, 0xBC, 0xA4, 0x05, 0x60, 0x39, 0x5D, 0x90, 0xC7,
				0xC7, 0xAB, 0x8E, 0x4B, 0x95, 0xFA, 0x2D, 0x7B, 0xD1, 0x83, 0xF1, 0x8D, 0x8F, 0xDF, 0xFC, 0x3B,
				0x1E, 0x04, 0xEE, 0x73, 0xF6, 0xE2, 0xD1, 0x7E, 0x92, 0xFC, 0x9C, 0x74, 0x18, 0x3A, 0x1E, 0x8F,
			})
			// So(u.Skein(make([]byte, 64), 511, 512), ShouldResemble, []byte{
			// 	0xB9, 0xA8, 0x5A, 0x77, 0x96, 0xF0, 0xAC, 0xC5, 0x2F, 0x65, 0x8C, 0xEA, 0xF0, 0x8E, 0x7F, 0x6E,
			// 	0xD3, 0xD8, 0xDD, 0x57, 0xBC, 0x26, 0xFB, 0x86, 0xE7, 0x29, 0x5F, 0xA5, 0x89, 0x26, 0xC1, 0x5F,
			// 	0x27, 0xF9, 0x6A, 0x7A, 0x7E, 0xE5, 0x3E, 0x54, 0x3F, 0x08, 0xEF, 0xC6, 0xFD, 0x3B, 0x91, 0x20,
			// 	0x1A, 0x89, 0xE7, 0x06, 0xFC, 0x4E, 0x8C, 0xF0, 0xB9, 0x82, 0x32, 0xBA, 0xAE, 0x86, 0xA8, 0x22,
			// })
			So(u.Skein(make([]byte, 64), 512, 512), ShouldResemble, []byte{
				0x33, 0xF7, 0x45, 0x7D, 0xE0, 0x65, 0x69, 0xE7, 0xCF, 0x5F, 0xD1, 0xED, 0xD5, 0x0C, 0xCF, 0xE1,
				0xD5, 0xF1, 0x66, 0x42, 0x9E, 0x75, 0xDD, 0xBE, 0x54, 0xA5, 0xB7, 0xE2, 0x47, 0x03, 0x0D, 0xD9,
				0x12, 0xF0, 0xDC, 0x5A, 0xB6, 0x01, 0x2F, 0x59, 0xCE, 0x92, 0x03, 0xAB, 0xD8, 0x2B, 0x31, 0x6D,
				0xF6, 0x7D, 0x5C, 0x6F, 0x00, 0x9A, 0x18, 0xBA, 0x84, 0xDB, 0x03, 0x01, 0x46, 0xDA, 0x99, 0xDB,
			})
			// So(u.Skein(make([]byte, 65), 513, 512), ShouldResemble, []byte{
			// 	0xDC, 0xB0, 0x0A, 0x11, 0x32, 0x5F, 0xE2, 0x88, 0x15, 0xE1, 0x8E, 0xA4, 0x5F, 0x99, 0x28, 0x78,
			// 	0x1B, 0xCC, 0x06, 0x53, 0x10, 0x6B, 0xD1, 0xC1, 0xDE, 0x8E, 0xD6, 0x0C, 0xA5, 0x51, 0xF7, 0xF1,
			// 	0x44, 0x75, 0x46, 0x25, 0x2E, 0x56, 0x7D, 0x26, 0x98, 0xA8, 0x40, 0x82, 0x86, 0x5F, 0xCE, 0xB1,
			// 	0xF2, 0xFE, 0x4D, 0xA0, 0xD8, 0x41, 0xD5, 0x6B, 0x3B, 0xE1, 0xEA, 0x0E, 0xC0, 0x17, 0x78, 0xC6,
			// })
			So(u.Skein(make([]byte, 96), 768, 512), ShouldResemble, []byte{
				0x24, 0x35, 0x9E, 0x4D, 0xA3, 0x9D, 0xB5, 0xB4, 0x99, 0x50, 0x87, 0xC3, 0x17, 0x3B, 0xD1, 0x6D,
				0xC7, 0x3E, 0x65, 0xAB, 0x7E, 0xC1, 0x99, 0x1F, 0x7F, 0xA8, 0xA3, 0xDB, 0x23, 0x93, 0x97, 0xDC,
				0x09, 0xC9, 0x46, 0x11, 0x57, 0xD9, 0x39, 0xB2, 0x8F, 0xB8, 0x10, 0x7A, 0x13, 0xB3, 0x1A, 0x15,
				0x15, 0x8B, 0xD0, 0x0F, 0x85, 0x43, 0x3A, 0xD2, 0xAA, 0xE4, 0xA1, 0xB0, 0x1B, 0x25, 0xE8, 0x4D,
			})
			// So(u.Skein(make([]byte, 128), 1023, 512), ShouldResemble, []byte{
			// 	0xC1, 0x05, 0x27, 0xBC, 0x77, 0xC2, 0xE7, 0xDD, 0xFC, 0x8D, 0xEB, 0x8E, 0xE6, 0xD8, 0x28, 0xA8,
			// 	0x82, 0x16, 0xF6, 0x89, 0xE5, 0xDC, 0x1A, 0xF4, 0x1E, 0xF6, 0x39, 0x7E, 0x3B, 0xD1, 0xE9, 0xD1,
			// 	0xC8, 0x90, 0xAD, 0xCC, 0xFE, 0x68, 0xA6, 0xBA, 0x7C, 0xCD, 0xB9, 0xC2, 0x96, 0xF1, 0x9B, 0x79,
			// 	0x72, 0xA7, 0xC4, 0x73, 0xFC, 0x29, 0x82, 0x3F, 0x84, 0xA2, 0x48, 0x7D, 0x93, 0x15, 0x69, 0x98,
			// })
			So(u.Skein(make([]byte, 128), 1024, 160), ShouldResemble, []byte{
				0x9C, 0xC1, 0x81, 0x0D, 0xDF, 0xE9, 0x71, 0xCF, 0x71, 0xFE, 0xD0, 0x81, 0x5D, 0xF8, 0x62, 0x92,
				0x6C, 0x85, 0xCA, 0x6E,
			})
			So(u.Skein(make([]byte, 128), 1024, 224), ShouldResemble, []byte{
				0xBE, 0xC6, 0xA3, 0x7A, 0x9F, 0x08, 0x6B, 0xB2, 0x39, 0x7A, 0xE1, 0xBD, 0xF0, 0x00, 0xEC, 0x5E,
				0xB8, 0x7A, 0xD5, 0x80, 0x39, 0xF3, 0x61, 0x23, 0xA2, 0x7E, 0x0E, 0xF1,
			})
			So(u.Skein(make([]byte, 128), 1024, 256), ShouldResemble, []byte{
				0x2D, 0x0E, 0x2E, 0x24, 0x19, 0x72, 0xDF, 0x39, 0xBE, 0x82, 0x2A, 0x8C, 0x68, 0x21, 0x05, 0xC6,
				0x47, 0x47, 0xFA, 0xF8, 0xA1, 0x0E, 0xC0, 0x32, 0x88, 0x1D, 0xE7, 0xDC, 0x67, 0x88, 0x7C, 0xC2,
			})
			So(u.Skein(make([]byte, 128), 1024, 384), ShouldResemble, []byte{
				0xE6, 0x3E, 0xA4, 0x69, 0x8F, 0x31, 0x4A, 0xD9, 0xF8, 0xF8, 0xCB, 0xD1, 0xF3, 0x36, 0xE0, 0x27,
				0x95, 0x5F, 0x8D, 0xCE, 0x78, 0xC3, 0x21, 0x0A, 0xF9, 0xB1, 0xF4, 0x6B, 0xD3, 0x28, 0x36, 0x7D,
				0x8E, 0x88, 0xD4, 0x31, 0x07, 0x1C, 0x43, 0x85, 0xCD, 0x8B, 0x50, 0xD7, 0x48, 0x62, 0xC2, 0x48,
			})
			So(u.Skein(make([]byte, 128), 1024, 512), ShouldResemble, []byte{
				0xFB, 0xE6, 0x5B, 0x75, 0xD6, 0x81, 0xB2, 0xFE, 0x35, 0x47, 0x80, 0xBD, 0xDF, 0x82, 0xCC, 0xF1,
				0x64, 0xC5, 0xCB, 0x28, 0x27, 0xF8, 0xE4, 0xE7, 0xDE, 0x96, 0x23, 0x59, 0x07, 0x44, 0x34, 0x28,
				0x95, 0x78, 0x81, 0xC7, 0x6C, 0xE4, 0x65, 0x55, 0xE2, 0xBB, 0x9E, 0xE3, 0x4F, 0x42, 0xF7, 0xA9,
				0xB2, 0xE0, 0x90, 0xB5, 0x5D, 0x73, 0xC7, 0xA0, 0x25, 0x06, 0xE1, 0x7B, 0xBD, 0xFF, 0xA4, 0xF2,
			})
			So(u.Skein(make([]byte, 128), 1024, 1024), ShouldResemble, []byte{
				0x4F, 0xC4, 0x31, 0x53, 0x37, 0x41, 0x6A, 0x60, 0x15, 0x74, 0xC3, 0x77, 0x20, 0x5A, 0xC5, 0x17,
				0x23, 0x5D, 0xAE, 0x3D, 0x39, 0xC8, 0x48, 0x5E, 0xA5, 0x19, 0x08, 0xAC, 0x86, 0xFB, 0x43, 0x55,
				0xD8, 0x5C, 0xE6, 0xBC, 0x6F, 0x2B, 0x65, 0x38, 0xD9, 0xBD, 0xB0, 0x8B, 0x69, 0x4F, 0x8F, 0xDA,
				0x4E, 0x46, 0x64, 0x2A, 0xEE, 0x61, 0x43, 0x84, 0x28, 0xE6, 0xEE, 0x7E, 0xC1, 0xF9, 0x4E, 0xAD,
				0xC0, 0x09, 0x96, 0xF3, 0xA4, 0x41, 0xAA, 0xA9, 0x1C, 0x96, 0xC1, 0x91, 0x67, 0xF1, 0xAB, 0x21,
				0x0B, 0x6C, 0x99, 0xAB, 0x3D, 0x64, 0x95, 0x92, 0x16, 0x6F, 0x74, 0x20, 0xA9, 0x94, 0xC9, 0xBD,
				0x32, 0xBC, 0xCD, 0xE2, 0x63, 0x91, 0xB0, 0x9C, 0xEB, 0x81, 0x5E, 0x2A, 0x12, 0xE3, 0xDF, 0x80,
				0x60, 0x5D, 0x70, 0x78, 0xFB, 0x1B, 0x8F, 0xCA, 0xF0, 0x1B, 0x17, 0x54, 0xCC, 0x27, 0x1B, 0x6E,
			})
			So(u.Skein(make([]byte, 128), 1024, 264), ShouldResemble, []byte{
				0x24, 0x39, 0x4D, 0xD2, 0x1F, 0xBA, 0x42, 0xA1, 0xD5, 0xD2, 0x30, 0x2A, 0x23, 0x7F, 0xCF, 0xEA,
				0x34, 0x5E, 0x6E, 0x45, 0xC3, 0xC7, 0xD0, 0xEA, 0x9A, 0xB9, 0xAE, 0x37, 0x4C, 0x96, 0x22, 0xC3,
				0x10,
			})
			So(u.Skein(make([]byte, 128), 1024, 520), ShouldResemble, []byte{
				0xC7, 0x78, 0x61, 0xB1, 0xFC, 0xE6, 0x7C, 0x93, 0x63, 0x09, 0x68, 0xF2, 0x1F, 0x9E, 0x3D, 0x0C,
				0x24, 0xD3, 0x47, 0x0E, 0xCE, 0xE2, 0x05, 0xEC, 0x56, 0x19, 0x2F, 0x23, 0x00, 0xE4, 0x3B, 0x56,
				0xD3, 0xC0, 0x63, 0xF6, 0x59, 0x68, 0x75, 0x09, 0x2A, 0x10, 0x8E, 0x8A, 0xD3, 0x4C, 0x42, 0x0B,
				0xC2, 0xF6, 0x97, 0x8D, 0x4F, 0x3C, 0x2B, 0xB6, 0xE5, 0x39, 0x49, 0xA5, 0x06, 0x51, 0xE0, 0x0E,
				0x2D,
			})
			So(u.Skein(make([]byte, 128), 1024, 1032), ShouldResemble, []byte{
				0xA9, 0x75, 0x80, 0x15, 0xF0, 0x89, 0x2C, 0x5C, 0xFE, 0x64, 0x86, 0x04, 0xBA, 0x7C, 0xC4, 0x87,
				0xFB, 0x6A, 0xCB, 0x74, 0xB8, 0xAE, 0xC2, 0x8D, 0xCF, 0x24, 0xA4, 0x41, 0x1C, 0xCD, 0x46, 0x39,
				0xB6, 0x02, 0x2C, 0xCA, 0x7A, 0x11, 0xF8, 0xB3, 0xEC, 0xD3, 0xE4, 0xFB, 0xE5, 0x23, 0xB0, 0xF7,
				0xAC, 0xF0, 0x3C, 0x57, 0xFD, 0x22, 0xCD, 0xA2, 0x8E, 0xEE, 0x38, 0x95, 0x67, 0x14, 0x95, 0x02,
				0xB2, 0x55, 0x83, 0x14, 0x79, 0x2B, 0x6C, 0x01, 0xEB, 0x72, 0x50, 0xE0, 0x4F, 0x79, 0x4D, 0xD6,
				0xCA, 0x62, 0xFF, 0xEC, 0xEA, 0x43, 0xB2, 0x29, 0xE3, 0x1A, 0xB3, 0x9D, 0x3B, 0x16, 0x01, 0x95,
				0x85, 0x47, 0xFB, 0x13, 0x3B, 0x38, 0x7C, 0xE9, 0x86, 0xA1, 0x12, 0xB6, 0x53, 0x5F, 0xC5, 0x82,
				0x67, 0xDB, 0x07, 0xBC, 0x0B, 0xE6, 0x19, 0xBA, 0xD0, 0x7F, 0xC6, 0xD3, 0xF5, 0x53, 0x79, 0xB2,
				0x17,
			})
			So(u.Skein(make([]byte, 128), 1024, 2056), ShouldResemble, []byte{
				0x9C, 0xA3, 0x3B, 0xE9, 0x20, 0xC5, 0x2D, 0x37, 0xA4, 0x12, 0x17, 0x4D, 0x42, 0x73, 0xC7, 0x1C,
				0x10, 0xAD, 0x2F, 0xF2, 0xCE, 0xC2, 0xF2, 0x39, 0x9E, 0x14, 0xBD, 0x05, 0xD5, 0x85, 0x42, 0xAF,
				0x82, 0xE4, 0xE4, 0x47, 0x2A, 0x9C, 0x21, 0xA9, 0xD5, 0xD3, 0x56, 0x25, 0xA9, 0x03, 0xC6, 0x92,
				0x5D, 0xF1, 0x88, 0xC8, 0x23, 0x26, 0xB7, 0x41, 0xDE, 0x2B, 0x66, 0x02, 0xFA, 0x09, 0x0C, 0x74,
				0x3F, 0xDF, 0xC0, 0xF1, 0x0E, 0x08, 0x68, 0xED, 0x78, 0xBB, 0x06, 0x7C, 0xF2, 0x8A, 0xF3, 0xC4,
				0xE0, 0x43, 0xB6, 0x69, 0xF6, 0x7D, 0x99, 0xAB, 0xDC, 0xC3, 0xC4, 0x99, 0xCC, 0xB9, 0xC3, 0x71,
				0x8F, 0x49, 0x04, 0x1C, 0x93, 0xD8, 0x77, 0x96, 0x60, 0x7C, 0xC7, 0xAD, 0x52, 0xDF, 0x4F, 0x92,
				0x86, 0x42, 0x2E, 0x4E, 0xD2, 0x3D, 0xC2, 0xDA, 0x1A, 0x45, 0x23, 0xA1, 0x58, 0xCB, 0x7D, 0x3B,
				0xC7, 0x79, 0x2C, 0x80, 0x8D, 0x09, 0x43, 0xE1, 0x2C, 0x10, 0x3A, 0x6A, 0xFE, 0x68, 0x8E, 0x58,
				0x6E, 0x9F, 0x39, 0xC0, 0xEA, 0x88, 0xE1, 0x66, 0x6F, 0x84, 0x06, 0x3C, 0x67, 0x00, 0xF5, 0x4B,
				0xFE, 0x39, 0x59, 0xB5, 0xFC, 0x91, 0x16, 0xD9, 0x21, 0xA0, 0x33, 0x1F, 0x3A, 0x78, 0x5B, 0x37,
				0x3E, 0xDA, 0x08, 0xF5, 0xFD, 0xA3, 0x39, 0xB6, 0xD7, 0xE8, 0x3D, 0xFE, 0x9B, 0x40, 0x3E, 0x39,
				0xA2, 0x20, 0x4D, 0xD5, 0x65, 0x8B, 0x50, 0x23, 0xCA, 0x89, 0x95, 0x80, 0xD7, 0x49, 0xF1, 0x77,
				0x0A, 0x1D, 0x5F, 0x64, 0xA3, 0xB7, 0x0D, 0x04, 0x8B, 0x15, 0xD9, 0x0F, 0xFA, 0x7B, 0x2C, 0x22,
				0xA1, 0xB2, 0xB5, 0x7B, 0x84, 0x20, 0xAB, 0x9D, 0x05, 0x3C, 0x90, 0x7A, 0x8B, 0xF4, 0x33, 0xE4,
				0x28, 0xF9, 0x8F, 0x31, 0xEB, 0x18, 0xE8, 0x9F, 0xD5, 0x45, 0x0F, 0x68, 0x6D, 0x8D, 0xE8, 0x19,
				0x20,
			})
			// So(u.Skein(make([]byte, 129), 1025, 512), ShouldResemble, []byte{
			// 	0xE4, 0xBB, 0x39, 0xF4, 0x1F, 0xFD, 0x4C, 0x58, 0x35, 0x60, 0xDC, 0xA8, 0x1D, 0x0E, 0xB7, 0x82,
			// 	0x0A, 0xBA, 0x4F, 0x43, 0xAF, 0x3A, 0x58, 0x68, 0x09, 0xCB, 0xFC, 0xA2, 0x3D, 0x62, 0x92, 0x47,
			// 	0x3A, 0xF2, 0xA7, 0x98, 0x28, 0x97, 0x85, 0x88, 0x48, 0x84, 0xFB, 0x62, 0x44, 0x53, 0xDE, 0xB1,
			// 	0x6D, 0x59, 0xDC, 0xDA, 0xF9, 0xB2, 0x31, 0x5F, 0x6E, 0x06, 0xBB, 0xE4, 0x1E, 0x38, 0xEE, 0x54,
			// })
			// So(u.Skein(make([]byte, 256), 2047, 512), ShouldResemble, []byte{
			// 	0xC5, 0x5A, 0x80, 0x88, 0xFF, 0x7E, 0x91, 0x49, 0xBD, 0x5B, 0x93, 0x09, 0x42, 0x3B, 0x5E, 0x2C,
			// 	0xFD, 0x1D, 0x58, 0x68, 0x04, 0x76, 0x48, 0x92, 0xBC, 0xF7, 0x79, 0x4E, 0x57, 0xB3, 0xFF, 0x4E,
			// 	0xFD, 0x6E, 0x3D, 0xBE, 0xCF, 0x9C, 0xF4, 0xB1, 0xC9, 0x1B, 0x91, 0xF7, 0xA6, 0xDD, 0xCA, 0x37,
			// 	0xFB, 0x69, 0x72, 0x41, 0x63, 0x42, 0x5B, 0xF3, 0xCF, 0xD1, 0x1A, 0x1E, 0xB6, 0x09, 0x80, 0xFF,
			// })
			So(u.Skein(make([]byte, 256), 2048, 512), ShouldResemble, []byte{
				0xD7, 0x4F, 0x3B, 0x94, 0x6A, 0x59, 0xD1, 0x6A, 0x50, 0xFE, 0xD3, 0x47, 0x86, 0xAC, 0xB2, 0x3A,
				0xEB, 0x60, 0x69, 0xA1, 0x56, 0x7B, 0xDC, 0xC2, 0x44, 0x2A, 0x54, 0xC7, 0x4A, 0x4D, 0x41, 0xA2,
				0x4A, 0x62, 0xF3, 0xF1, 0xA7, 0x6C, 0x6B, 0xB4, 0x4B, 0xD5, 0x4A, 0xED, 0xF9, 0x4B, 0x40, 0xF5,
				0x3D, 0x93, 0x35, 0x15, 0x45, 0x30, 0x98, 0x6C, 0xD4, 0xF5, 0xAA, 0x16, 0xF9, 0x3D, 0x2D, 0x24,
			})
			// So(u.Skein(make([]byte, 257), 2049, 512), ShouldResemble, []byte{
			// 	0xB6, 0x1F, 0x47, 0xB2, 0xE9, 0x07, 0xA0, 0x28, 0x08, 0xB0, 0x77, 0x64, 0xDC, 0x04, 0x78, 0x16,
			// 	0x22, 0x85, 0x7A, 0x66, 0x9B, 0xEB, 0xF6, 0xEC, 0xA2, 0xE6, 0x7A, 0xEE, 0x9A, 0xAD, 0xA5, 0x25,
			// 	0x51, 0xEF, 0xA5, 0x7F, 0x21, 0xFE, 0xD7, 0x52, 0x78, 0xAF, 0x2C, 0x9D, 0xD7, 0x54, 0xAB, 0x1D,
			// 	0xB7, 0x9E, 0xA6, 0xA5, 0xC1, 0xF5, 0xB0, 0x93, 0x12, 0x04, 0x9C, 0x7D, 0x73, 0x5A, 0x9D, 0xF0,
			// })
		})
	})
}

func BenchmarkSkeinGeneral_256_256_16B(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf256.Encrypt, 256)
	msg := make([]byte, 16)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}

func BenchmarkSkeinGeneral_256_256_1M(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf256.Encrypt, 256)
	msg := make([]byte, 1024*1024)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}

func BenchmarkSkeinGeneral_512_256_16B(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf512.Encrypt, 512)
	msg := make([]byte, 16)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}

func BenchmarkSkeinGeneral_512_256_1M(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf512.Encrypt, 512)
	msg := make([]byte, 1024*1024)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}

func BenchmarkSkeinGeneral_1024_256_16B(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf1024.Encrypt, 1024)
	msg := make([]byte, 16)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}

func BenchmarkSkeinGeneral_1024_256_1M(b *testing.B) {
	b.StopTimer()
	u, _ := ubi.New(tf1024.Encrypt, 1024)
	msg := make([]byte, 1024*1024)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		u.Skein(msg, len(msg)*8, 256)
	}
}
